/**
 * Rewards APIs
 * # Overview Rewards APIs provide functionalities to retrieve rewards balances, redeemed rewards and rebates including historical information. Rewards Identifier can either be Programme or Card account number. These APIs also provides functionalities to view Rewards Catalogue items and redeem Rewards as miles, Vouchers, Cashback for your earned Rewards points.  # Version History Version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.0      | July, 2018   | Added new API **Retrieve Rewards Summary**. Added new fields **grossAmount** and **merchantId** to **Pay merchant using Rewards points** and **Pay merchant using daily$** API.  Added new field **uuid** for all APIs.  # Authentication <!-- ReDoc-Inject: <security-definitions> -->  # Pagination Pagination is not available on this API.  # Frequently Asked Question Q1: How to get list of Active Rewards account?  Ans: Get list of Active rewards account using **_/parties/{partyId}/rewards** with path parameters PartyId  Q2:  How to return rewards rebate transaction history?  Ans: Get rewards rebate transaction history for a given rewards identifier using **_/rewards/{rewardsId}/rebatesTransactions** with path parameters rewardsId. Note: Start date and End Date is mandatory.  Q3: How to redeem Rewards as Miles, Vouchers, or Cashback?  Ans: Get the redemption of Rewards to get Miles or Loyalty points, Vouchers or Cashback using **_/rewards/milesConversion/rewards/vouchersRedemption** , **_/rewards/rebatesCashback**  Q4: How to invoke partial redemption for Rewards?  Ans: Enter the total amount of the transaction in the grossAmount field and the amount to be redeemed via rewards in the redeemAmount field when calling the **_/rewards/{rewardsId}/paymentByPoints** or **_/rewards/{rewardsId}/paymentByRebates**.  # Known Issues This API has no pending issues at the moment. Want to report a new issue? please help us **here**  # Throttling (Rate Limits) We throttle our APIs by default to ensure maximum performance for all developers.  
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BalanceCheck', 'model/CatalogueItemDetl', 'model/ConversionRates', 'model/Error', 'model/ErrorList', 'model/MilesRedemptionRequest', 'model/MilesRedemptionResult', 'model/PaymentByPoints', 'model/PaymentByRebates', 'model/PaymentRequest', 'model/PointsBalances', 'model/RebatesBalances', 'model/RebatesRedemptionRequest', 'model/RebatesRedemptionResult', 'model/Rewards', 'model/RewardsCatalogue', 'model/RewardsPointsTransactions', 'model/RewardsRebatesTransactions', 'model/RewardsSummary', 'model/VouchersRedemptionRequest', 'model/VouchersRedemptionResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BalanceCheck'), require('../model/CatalogueItemDetl'), require('../model/ConversionRates'), require('../model/Error'), require('../model/ErrorList'), require('../model/MilesRedemptionRequest'), require('../model/MilesRedemptionResult'), require('../model/PaymentByPoints'), require('../model/PaymentByRebates'), require('../model/PaymentRequest'), require('../model/PointsBalances'), require('../model/RebatesBalances'), require('../model/RebatesRedemptionRequest'), require('../model/RebatesRedemptionResult'), require('../model/Rewards'), require('../model/RewardsCatalogue'), require('../model/RewardsPointsTransactions'), require('../model/RewardsRebatesTransactions'), require('../model/RewardsSummary'), require('../model/VouchersRedemptionRequest'), require('../model/VouchersRedemptionResult'));
  } else {
    // Browser globals (root is window)
    if (!root.RewardsApIs) {
      root.RewardsApIs = {};
    }
    root.RewardsApIs.RewardsApi = factory(root.RewardsApIs.ApiClient, root.RewardsApIs.BalanceCheck, root.RewardsApIs.CatalogueItemDetl, root.RewardsApIs.ConversionRates, root.RewardsApIs.Error, root.RewardsApIs.ErrorList, root.RewardsApIs.MilesRedemptionRequest, root.RewardsApIs.MilesRedemptionResult, root.RewardsApIs.PaymentByPoints, root.RewardsApIs.PaymentByRebates, root.RewardsApIs.PaymentRequest, root.RewardsApIs.PointsBalances, root.RewardsApIs.RebatesBalances, root.RewardsApIs.RebatesRedemptionRequest, root.RewardsApIs.RebatesRedemptionResult, root.RewardsApIs.Rewards, root.RewardsApIs.RewardsCatalogue, root.RewardsApIs.RewardsPointsTransactions, root.RewardsApIs.RewardsRebatesTransactions, root.RewardsApIs.RewardsSummary, root.RewardsApIs.VouchersRedemptionRequest, root.RewardsApIs.VouchersRedemptionResult);
  }
}(this, function(ApiClient, BalanceCheck, CatalogueItemDetl, ConversionRates, Error, ErrorList, MilesRedemptionRequest, MilesRedemptionResult, PaymentByPoints, PaymentByRebates, PaymentRequest, PointsBalances, RebatesBalances, RebatesRedemptionRequest, RebatesRedemptionResult, Rewards, RewardsCatalogue, RewardsPointsTransactions, RewardsRebatesTransactions, RewardsSummary, VouchersRedemptionRequest, VouchersRedemptionResult) {
  'use strict';

  /**
   * Rewards service.
   * @module api/RewardsApi
   * @version 1.0
   */

  /**
   * Constructs a new RewardsApi. 
   * @alias module:api/RewardsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the partiesPartyIdRewardsGet operation.
     * @callback module:api/RewardsApi~partiesPartyIdRewardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rewards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve List of Rewards Accounts
     * Return a list of the active rewards accounts with the rewards for a given party identifier.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   | Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access Token
     * @param {String} partyId Tokenised Party Identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~partiesPartyIdRewardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rewards}
     */
    this.partiesPartyIdRewardsGet = function(clientId, accessToken, partyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling partiesPartyIdRewardsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling partiesPartyIdRewardsGet");
      }

      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling partiesPartyIdRewardsGet");
      }


      var pathParams = {
        'partyId': partyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Rewards;

      return this.apiClient.callApi(
        '/parties/{partyId}/rewards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the partiesPartyIdRewardsSummaryGet operation.
     * @callback module:api/RewardsApi~partiesPartyIdRewardsSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rewards Summary
     * Returns a list of rewards accounts with the available rewards balance for a given party identifier and its corresponding conversion rate. If amount is specified, it checks whether the rewards balances is sufficient for the bill amount. Otherwise, it shows the minimum and total redeemable amounts of the rewards accounts.   *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required.  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access Token
     * @param {String} uuid Message UID
     * @param {String} partyId Tokenised Party Identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {Number} opts.amount Bill amount for which Rewards balance has to be checked for sufficiency
     * @param {module:api/RewardsApi~partiesPartyIdRewardsSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsSummary}
     */
    this.partiesPartyIdRewardsSummaryGet = function(clientId, accessToken, uuid, partyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling partiesPartyIdRewardsSummaryGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling partiesPartyIdRewardsSummaryGet");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling partiesPartyIdRewardsSummaryGet");
      }

      // verify the required parameter 'partyId' is set
      if (partyId === undefined || partyId === null) {
        throw new Error("Missing the required parameter 'partyId' when calling partiesPartyIdRewardsSummaryGet");
      }


      var pathParams = {
        'partyId': partyId
      };
      var queryParams = {
        'amount': opts['amount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': uuid
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RewardsSummary;

      return this.apiClient.callApi(
        '/parties/{partyId}/rewardsSummary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsCatalogueGet operation.
     * @callback module:api/RewardsApi~rewardsCatalogueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsCatalogue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rewards Catalogue items
     * Retrieves the list of items available in the Rewards Catalogue. Filters July be applied based on Customer or Account.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.partyId Tokenized Party identifier
     * @param {String} opts.cardId Tokenized Card or Account identifier
     * @param {String} opts.category Category of Reward items
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsCatalogueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsCatalogue}
     */
    this.rewardsCatalogueGet = function(clientId, accessToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsCatalogueGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsCatalogueGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'partyId': opts['partyId'],
        'cardId': opts['cardId'],
        'category': opts['category'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RewardsCatalogue;

      return this.apiClient.callApi(
        '/rewards/catalogue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsCatalogueItemIdGet operation.
     * @callback module:api/RewardsApi~rewardsCatalogueItemIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogueItemDetl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Reward Catalogue item details
     * Returns the details of the reward item from the Reward Catalogue.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} itemId Catalogue item identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsCatalogueItemIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogueItemDetl}
     */
    this.rewardsCatalogueItemIdGet = function(clientId, accessToken, itemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsCatalogueItemIdGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsCatalogueItemIdGet");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling rewardsCatalogueItemIdGet");
      }


      var pathParams = {
        'itemId': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CatalogueItemDetl;

      return this.apiClient.callApi(
        '/rewards/catalogue/{itemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsMilesConversionPost operation.
     * @callback module:api/RewardsApi~rewardsMilesConversionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MilesRedemptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeem Rewards as miles
     * Initiates the redemption of Rewards to get miles or loyalty points.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {module:model/MilesRedemptionRequest} rewardsRedemption Rewards Redemption details
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsMilesConversionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MilesRedemptionResult}
     */
    this.rewardsMilesConversionPost = function(clientId, accessToken, rewardsRedemption, opts, callback) {
      opts = opts || {};
      var postBody = rewardsRedemption;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsMilesConversionPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsMilesConversionPost");
      }

      // verify the required parameter 'rewardsRedemption' is set
      if (rewardsRedemption === undefined || rewardsRedemption === null) {
        throw new Error("Missing the required parameter 'rewardsRedemption' when calling rewardsMilesConversionPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MilesRedemptionResult;

      return this.apiClient.callApi(
        '/rewards/milesConversion', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRebatesCashbackPost operation.
     * @callback module:api/RewardsApi~rewardsRebatesCashbackPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebatesRedemptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeem Rewards as Cashback
     * Initiates the redemption of Rewards to get Cashback.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {module:model/RebatesRedemptionRequest} rewardsRedemption Rewards Redemption details
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRebatesCashbackPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebatesRedemptionResult}
     */
    this.rewardsRebatesCashbackPost = function(clientId, accessToken, rewardsRedemption, opts, callback) {
      opts = opts || {};
      var postBody = rewardsRedemption;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRebatesCashbackPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRebatesCashbackPost");
      }

      // verify the required parameter 'rewardsRedemption' is set
      if (rewardsRedemption === undefined || rewardsRedemption === null) {
        throw new Error("Missing the required parameter 'rewardsRedemption' when calling rewardsRebatesCashbackPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RebatesRedemptionResult;

      return this.apiClient.callApi(
        '/rewards/rebatesCashback', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdBalanceCheckGet operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdBalanceCheckGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BalanceCheck} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if balance is sufficient for the bill amount
     * This API can be used to in two ways - One is to check the available Rewards balance and the other is to check if the bill amount can be covered with the available Rewards balance. In the second case, if the balance is less than the bill amount, then available Cash value equivalent of Rewards balance is returned.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {Number} opts.amount Bill amount for which Rewards balance has to be checked for sufficiency
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdBalanceCheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BalanceCheck}
     */
    this.rewardsRewardsIdBalanceCheckGet = function(clientId, accessToken, rewardsId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdBalanceCheckGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdBalanceCheckGet");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdBalanceCheckGet");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
        'amount': opts['amount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BalanceCheck;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/balanceCheck', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdConversionRatesGet operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdConversionRatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionRates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversion rates for Points/Daily$
     * Returns the conversion rates to redeem customer&#39;s&#39; Points or Rebates for the Merchant&#39;s products/services. The rates could optionally vary based on the Merchant as well (currently not in scope).  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.merchantId Merchant Identifier
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdConversionRatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionRates}
     */
    this.rewardsRewardsIdConversionRatesGet = function(clientId, accessToken, rewardsId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdConversionRatesGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdConversionRatesGet");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdConversionRatesGet");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'merchantId': opts['merchantId'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversionRates;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/conversionRates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdPaymentByPointsPost operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdPaymentByPointsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentByPoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pay merchant using Rewards Points
     * Initiates the redemption of Points for payments to a Merchant partner. The referenceId and orderId must be unique for each request. However, if invoking this API more than once because of error in previous attempt, then orderId can be same but referenceId must be (different and) unique.  *Important*: The table below describes the changes in the API behaviour according to the value of the *&#39;accept-version&#39;* passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   | Added new fields **grossAmount**, **merchantId** and **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {module:model/PaymentRequest} paymentByPoints Payment through Redemption
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdPaymentByPointsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentByPoints}
     */
    this.rewardsRewardsIdPaymentByPointsPost = function(clientId, accessToken, rewardsId, paymentByPoints, opts, callback) {
      opts = opts || {};
      var postBody = paymentByPoints;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdPaymentByPointsPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdPaymentByPointsPost");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdPaymentByPointsPost");
      }

      // verify the required parameter 'paymentByPoints' is set
      if (paymentByPoints === undefined || paymentByPoints === null) {
        throw new Error("Missing the required parameter 'paymentByPoints' when calling rewardsRewardsIdPaymentByPointsPost");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentByPoints;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/paymentByPoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdPaymentByRebatesPost operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdPaymentByRebatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentByRebates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pay merchant using daily$
     * Initiates the redemption of Daily$ for payments to a Merchant partner. The referenceId and orderId must be unique for each request. However, if invoking this API more than once because of error in previous attempt, then orderId can be same but referenceId must be (different and) unique.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   | Added new fields **grossAmount**, **merchantId** and **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {module:model/PaymentRequest} paymentRequest Payment through Redemption
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdPaymentByRebatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentByRebates}
     */
    this.rewardsRewardsIdPaymentByRebatesPost = function(clientId, accessToken, rewardsId, paymentRequest, opts, callback) {
      opts = opts || {};
      var postBody = paymentRequest;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdPaymentByRebatesPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdPaymentByRebatesPost");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdPaymentByRebatesPost");
      }

      // verify the required parameter 'paymentRequest' is set
      if (paymentRequest === undefined || paymentRequest === null) {
        throw new Error("Missing the required parameter 'paymentRequest' when calling rewardsRewardsIdPaymentByRebatesPost");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentByRebates;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/paymentByRebates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdPointsGet operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdPointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointsBalances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rewards Points Balances
     * Return rewards points balances for a given rewards identifier.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access Token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdPointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointsBalances}
     */
    this.rewardsRewardsIdPointsGet = function(clientId, accessToken, rewardsId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdPointsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdPointsGet");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdPointsGet");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PointsBalances;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/points', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdPointsTransactionsGet operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdPointsTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsPointsTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rewards Points Transaction History
     * Return rewards points transaction history for a given rewards Identifier and date range.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {Date} startDate Start Date. Format is YYYY-MM-DD
     * @param {Date} endDate End date. Format is YYYY-MM-DD
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.cursor Cursor
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdPointsTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsPointsTransactions}
     */
    this.rewardsRewardsIdPointsTransactionsGet = function(clientId, accessToken, rewardsId, startDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdPointsTransactionsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdPointsTransactionsGet");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdPointsTransactionsGet");
      }

      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling rewardsRewardsIdPointsTransactionsGet");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling rewardsRewardsIdPointsTransactionsGet");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cursor': opts['cursor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RewardsPointsTransactions;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/pointsTransactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdRebatesGet operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdRebatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebatesBalances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rewards Rebates Balances
     * Return rewards rebates balances for a given rewards identifier.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access Token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdRebatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebatesBalances}
     */
    this.rewardsRewardsIdRebatesGet = function(clientId, accessToken, rewardsId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdRebatesGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdRebatesGet");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdRebatesGet");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RebatesBalances;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/rebates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsRewardsIdRebatesTransactionsGet operation.
     * @callback module:api/RewardsApi~rewardsRewardsIdRebatesTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsRebatesTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rewards Rebates Transaction History
     * Return rewards rebates transaction history for a given rewards Identifier and date range.  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {String} rewardsId Tokenised Rewards Identifier
     * @param {Date} startDate Start Date. Format is YYYY-MM-DD
     * @param {Date} endDate End date. Format is YYYY-MM-DD
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.cursor Cursor
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsRewardsIdRebatesTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsRebatesTransactions}
     */
    this.rewardsRewardsIdRebatesTransactionsGet = function(clientId, accessToken, rewardsId, startDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsRewardsIdRebatesTransactionsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsRewardsIdRebatesTransactionsGet");
      }

      // verify the required parameter 'rewardsId' is set
      if (rewardsId === undefined || rewardsId === null) {
        throw new Error("Missing the required parameter 'rewardsId' when calling rewardsRewardsIdRebatesTransactionsGet");
      }

      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling rewardsRewardsIdRebatesTransactionsGet");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling rewardsRewardsIdRebatesTransactionsGet");
      }


      var pathParams = {
        'rewardsId': rewardsId
      };
      var queryParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cursor': opts['cursor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RewardsRebatesTransactions;

      return this.apiClient.callApi(
        '/rewards/{rewardsId}/rebatesTransactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rewardsVouchersRedemptionPost operation.
     * @callback module:api/RewardsApi~rewardsVouchersRedemptionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersRedemptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeem Rewards as Vouchers
     * Initiates the redemption of Rewards to get Voucher(s).  *Important*: The table below describes the changes in the API behaviour according to the value of the &#39;accept-version&#39; passed in the request header. Setting a specific version is recommended to invoke the desired message-set, unless the most recent version is required. accept-version | Release date | Change Log --------|--------------|---------------------- 1.0      | October, 2017   | Base version of API 1.1      | July, 2018   |Added new field **uuid** in request body  
     * @param {String} clientId Client Identifier
     * @param {String} accessToken Access token
     * @param {module:model/VouchersRedemptionRequest} rewardsRedemption Rewards Redemption details
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptVersion Specifies the acceptable version of the message set. If not specified, the latest version of the API will be considered. Example: 1.2
     * @param {String} opts.uuid Message UID
     * @param {module:api/RewardsApi~rewardsVouchersRedemptionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersRedemptionResult}
     */
    this.rewardsVouchersRedemptionPost = function(clientId, accessToken, rewardsRedemption, opts, callback) {
      opts = opts || {};
      var postBody = rewardsRedemption;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling rewardsVouchersRedemptionPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling rewardsVouchersRedemptionPost");
      }

      // verify the required parameter 'rewardsRedemption' is set
      if (rewardsRedemption === undefined || rewardsRedemption === null) {
        throw new Error("Missing the required parameter 'rewardsRedemption' when calling rewardsVouchersRedemptionPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientId': clientId,
        'accessToken': accessToken,
        'accept-version': opts['acceptVersion'],
        'uuid': opts['uuid']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VouchersRedemptionResult;

      return this.apiClient.callApi(
        '/rewards/vouchersRedemption', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
